#!/usr/bin/env node

var
  program = require('commander'),
  util = require('util'),
  spawn = require('child_process').spawn,
  fs = require('fs'),
  appStarted = false,
  apps,
  init, parseFiles, parseApp, startApp, listApps, removeApp, debug,

  Config = require(__dirname + '/lib/config');


debug = function (message, method) {
  if (program.debug) {
    console[(method) ? method : 'log'](message);
  }
};

init = function () {
  var foundIt = false;

  Config.getApps().forEach(function (app) {
    if (foundIt) return;

    var dir = app.directory;

    if (!fs.existsSync(dir)) {
      console.warn("Directory [" + dir + "] does not exist. Expected to find an app here. Removing it to keep configuration clean.");
      Config.removeApp(dir);
      return;
    }

    realPath = fs.realpathSync( dir );

    debug("path found : " + realPath);
    debug("current dir : " + process.cwd());

    if (realPath === process.cwd()) {
      foundIt = true;
      debug("starting app");
      startApp(app.command);
    }
  });

  if (!foundIt) {
    console.log("I don't know how to start an app from this directory.");
    program.prompt("Would you like to add a new app now? [y/n]: ", function (answer) {
      var a = answer.toLowerCase();

      if (a === 'y') {
        program.prompt("Home directory of the app? [" + process.cwd() + "]: ", function (homeDir) {
          var finalHomeDir = process.cwd();

          if (homeDir !== "") {
            finalHomeDir = homeDir;
          }

          program.prompt("Start command for this app: ", function (startCmd) {
            debug("Creating app located at [" + finalHomeDir + "] using the start command [" + startCmd + "]");
            Config.addApp(finalHomeDir, startCmd);

            program.prompt("Start now? [y/n]: ", function (answer) {
              var a = answer.toLowerCase();
              if (a === 'y') {
                startApp(startCmd);
              }
              process.stdin.destroy();
            }); // start now
          }); // start command
        }); // home directory
      } else {
        process.stdin.destroy();
      }
    });
  }
};

listApps = function () {
  var apps;

  apps = Config.getApps();

  console.log('Applications managed by start');
  console.log('---------------------------');
  apps.forEach(function (app) {
    console.log(app.directory + ' - ' + app.command);
  });

  console.log(apps.length + ' app(s) found.');
};

removeApp = function () {
  var currentApp = Config.getApp(process.cwd());

  if (currentApp) {
    console.log("Found app for current directory.");
    console.log(currentApp.directory + ' - ' + currentApp.command);
    program.prompt("Are you sure you want to remove this app? [y/n]: ", function (answer) {
      var a = answer.toLowerCase();
      if (a === 'y') {
        console.log("removing app....");
        Config.removeApp(process.cwd());
      }
      process.stdin.destroy();
    });
  } else {
    console.log("There is no app configured for this directory. Type 'start' to add one here.");
  }

};

startApp = function (cmd) {
  var proc;
  var command = cmd.split(" ")[0];
  var args = cmd.split(" ").slice(1);

  debug("running : " + command);
  debug("with args : " + args);

  proc = spawn(command, args, {detached: true});
  proc.stdout.setEncoding('utf8');
  proc.stdout.on('data', writeStdOut);
  proc.stderr.on('data', writeStdOut);

  // Listen for Ctrl + C from command line; kill the child process.
  process.on('SIGINT', function () {
    debug('Got SIGINT.  Terminating app.');
    proc.kill();
    process.exit(0);
  });
};

writeStdOut = function (msg) {
  process.stdout.write(msg);
};

program
  .version('0.0.0')
  .option('-d, --debug', 'logs debug statements')
  .option('-l, --list', 'list the apps start knows about')
  .option('-r, --remove', 'remove the start entry for the current directory')
  .parse(process.argv);

Config.init();

if (program.list) {
  listApps();
} else if (program.remove) {
  removeApp();
} else {
  init();
}



